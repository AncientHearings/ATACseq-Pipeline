samples: ["sample1"]
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
fastp:
  input:
    sample1:
      R1: "data/fastp/input/sample1_R1.fastq.gz"
      R2: "data/fastp/input/sample1_R2.fastq.gz"
    sample2:
      R1: "data/fastp/input/sample2_R1.fastq.gz" 
      R2: "data/fastp/input/sample2_R2.fastq.gz"
  output:
    dir: "results/fastp"
  params:
    threads: 4
    trim_front1: 5
    trim_front2: 5
    length_required: 30 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       
fastqc:
  output: "results/fastqc"
  params:
    threads: 2
    # Assuming the user has atleast dual-core CPU 

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 02: ALIGNMENT 
# bowtie2
bowtie2:
  input: "results/fastp"
  output: "results/bowtie2"
  params:
    index: "data/02_alignment/bowtie2/index/genome"
    threads: 2

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   
mitoATAC:
  input: 
    unsorted_bam: "results/bowtie2"
  output: 
    mito_stats: "results/mito-ATAC"
  params: 
    threads: 2
    mito_chr: "chrM"      
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Post alignment
# Samtools
# samtools sort 
samtools_sort:
  input:
    bam: "results/bowtie2"
  output:
    sorted_bam: "results/samtools_sort"   
  params:
    threads: 2
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# tn5 shift 
tn5_shift:
  input:
    filtered_bam: "results/samtools_sort"
  output:
    shifted_bam: "results/tn5_shift"
    shifted_bam_index: "results/tn5_shift"
  params:
    threads: 2
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>># samtools view
samtools_view:
  input:
    sorted_bam: "results/tn5-shift"
  output:
    filtered_bam: "results/samtools_view"
  params:
    threads: 2
    MAPQ: 30
    flags: 1804
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
samtools_markdup:
  input:
    shifted_bam: "results/tn5_shift"
  output:
    markdup_bam: "results/samtools_markdup"
  params:
    threads: 2
    remove_duplicates: "r"
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
samtools_index_post_markdup: 
  input:
    markdup: "results/samtools_markdup"
  output:
    index: "results/samtools_index/post_markdup"
  params:
    threads: 2
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# samtools index
samtools_index: 
  input:
    sorted: "results/samtools_sort"
  output:
    index: "results/samtools_index"
  params:
    threads: 2
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# samtools statistics
samtools_stats:
  input:
    filtered_bam: "results/samtools_view"
  output:
    stats: "results/samtools_stats"
  params:
    threads: 2
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Picard 
# Picard Collect Alignment Summary Metrics 
picard_collect_alignment_summary_metrics:
  input:
    filtered_bam: "results/samtools_view"
  output:
    alignment_metrics: "results/picard/CollectAlignmentSummaryMetrics"
  params:
    reference_genome: "data/reference_for_picard/genome.fa"
    threads: 2
    validation_stringency: "LENIENT"
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# picard 
# Picard Collect Insert Size Metrics         
picard_collect_insert_size_metrics:
  input:
    bam_sorted: "results/samtools_sort"
  output:
    metrics: "results/picard/CollectInsertSizeMetrics"
    histogram: "results/picard/CollectInsertSizeMetrics"
  params:
    M: 0.5
    validation_stringency: "LENIENT"
    threads: 2


#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# bedtools genomecov 
bedtools_genomecov:
  input:
    dedup_bam: "results/samtools_markdup" 
  output: 
    bedgraph: "results/bedtools_genomecov"
  params:
    genome: "data/reference/genome.chrom.sizes"
    threads: 2
    extra: "-bg"

# output filtered peaks                
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# sorted bedgraph files
sorted_bedgraph:
  input: 
    bedgraph: "results/bedtools_genomecov"
  output:
    sorted_bedgraph: "results/sorted_bedgraph_file"
  params:
    threads: 2
    mem_mb: "2G"

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Notes:
# "The configuration file is an arbitrary YAML or JSON file that provides a dictionary for global variables."       
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# bedgraph to bigwig conversion 
bigwig: 
  input:
    sorted_bedgraph: "results/sorted_bedgraph_file"
  output:
    bigwig: "results/bigwig"
  params:
    threads: 2
    genome: "data/reference/genome.chrom.sizes"

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
macs_peakcall:
  input:
    markdup_bam: "results/samtools_markdup"
  output: 
    peaks: "results/macs2_peakcall"
  params:
    genome_size: "hs"
    qvalue: 0.01
    nomodel: true  # Skip MACS2's model-based fragment length estimation 
    format: "BAMPE"
    nomodel: true
    threads: 2

# Mamba: drop-in replacement for conda, written in c++.
# Faster dependency resolution: uses libsolv backend, which is highly efficient.
# Parallel downloading.
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# phantompeakqualtools
phantompeakqualtools:
  input:
    indexed_dedup: "results/samtools_index/post_markdup"
    dedup_bam: "results/samtools_markdup"
  output:
    qc_metrics: "results/phantompeakqualtools"
  params:
    threads: 2

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# preseq
preseq:
  input:
    markdup_bam_index: "results/samtools_index/post_markdup"
    markdup_bam: "results/samtools_markdup"
  output:
    predicted_complexity: "results/preseq"

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
qualimap_bamqc:
  input:
    markdup_bam: "results/samtools_markdup"
  output:
    qc_dir: "results/qualimap"
  params:
    threads: 2
    
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# multiqc
multiqc:
  input:
    reports_dir: "results/"
  output:
    report: "results/multiqc"
  params:
    threads: 2
