samples:  
 - ATAC_Rep1_ENCFF121EPT
 
#...................fastp....................................................
 dir_raw_data: "data/"
 dir_trimmed_data: "results/fastp"
 thread: 4


 
#...................For  bowtie2............................... 
index_bowtie2:   "raw_data/genome/index/index"
inputs_bowtie2:  "results/fastp/cleaned_reads"
outputs_bowtie2: "results/aligned_reads"
threads:          8


#..................SAMTOOLS..................................
#...................SAM TO BAM ..............................

input_samtools_view: "results/aligned_reads"
output_samtools_view: "results/samtools_view"

#............................................................
#.................SAMTOOLS...................................
#..................SORT......................................

input_samtools_sort: "results/samtools_view"
output_samtools_sort: "results/samtools_sort"
threads: 4


#config.yaml file is a configuration file which has inputs and outputs paths , tools parameters and other settings to run the workflow dynamically.
#It means that when others run the pipeline, they can edit the configuration file as per necessaties. 
#There's no need to touch the code,  which the code remains clean and maintained allowing to be reproducible as the logical flowi.e., the algorithm issn't broke.
 #(Software Architecture (Separation of Concerns) which means that keep different reponsibilities in different places so we change one without disturbing the other. 
 
 

#Reason for choosing the yaml format:
 
#Easy to read and clean makes knowing where to edit and what  with ease.
#Multiple samples can be handles in simple, clear  structure. 
#There's no need to quote any data type. YAML understands datatypes automatically.
#Widely used in docker compose, github actions and kubernetes.
#-Reliable and familiar.



#...........................................................
#........................SAMTOOLS...........................
#.........................INDEX.............................
input_samtools_index: "results/samtools_sort"
output_samtools_index: "results/samtools_index"
threads: 4
#............................................................
#............................................................
#............................................................



#............................................................
#.........................samtools...........................
#..........................markdup..........................
input_1_samtools_markdup: "results/samtools_index"
input_2_samtools_markdup: "results/samtools_sort" 
output_samtools_markdup: "results/samtools_markdup"
threads: 4
#............................................................
#............................................................
#............................................................

#............Post samtools markdup QC........................
#The input variables  are comment out  because the inputs these can be accessed from the rule created for samtools markdup using the syntax rule.output.bam_markdup 





#............................................................
#.........................samtools.........................SAM..
#..........................flagstat..........................
#input_samtools_flagstat: "results/samtools_markdup"
output_samtools_flagstat: "result/samtools_markdup_post_qc/samtools_flagstat"
threads: 4
#............................................................
#............................................................
#............................................................



#............................................................
#......................samtools..............................
#........................stats...............................
#Iput_1_samtools_stats: output_samtools_markdup #Wrong this #will be treated as a string value. 
#input_samtools_stats:  "results/samtools_markdup"
output_samtools_stats: "results/samtools_markdup/post_qc/samtools_stats"
threads: 4
#............................................................
#.......................Picard...............................
#............CollectALignmentSummaryMetrics..................
#input_picard: "results/samtools_markdup"
output_picard: "results/samtools_markdup_post_qc/picard"
threads: 4
#............................................................
#............................................................
#............................................................



#............................................................
#.......................qualimap bamqc.......................
#............................................................
#input_qualimap: "results/samtools_markdup"
output_qualimap: "results/samtools_markdup_post_qc/qualimap"
threads: 4
#.............................................................
#.............................................................
#.............................................................




#.............................................................
#.....................picard..................................
#.............CollectInsertSizeFragments......................

output:
  picard_CollectInsertSizeFragements: "results/
  picard_CollectInsertSizeFragements"
  picard_CollectInsertSizeFragements_visualization: "results/ 
  picard_CollectInsertSizeFragements/Visualization"
  
threads: 4

#...............................................................
#...............................preseq.........................
#..............................................................

output: 
  preseq: "results/preseq"

threads: 4

#...............................................................
#..............................................................
#..............................................................



















#.............................................................
#.......................deeptools.............................
#.......................bamCoverage...........................
output_bamCoverge: "results/deeptools/bamCoverage"
threads: 4 
params: 
 binSize: x
 normalizeUsing: y  


#Nested dictionary can be created i.e., key-value pairs under a key.

#.............................................................
#.............................................................
#.............................................................



#.............................................................
#...........................macs2.............................
#.......................peak calling..........................
output_macs2_peak_calling : "results/macs2_peak_calling/"
threads: 4
#.............................................................
#.............................................................
#.............................................................






























































#.............................................................
#.........................multiqc.............................
#.............................................................
#input_multiqc: "results/samtools_markdup"
output_multiqc: "results/samtools_markdup_post_qc/multiqc"
threads: 4
#.............................................................
#.............................................................
#.............................................................





