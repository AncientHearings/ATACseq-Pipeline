 Step1: FastQC
 Run FastQC on raw reads. 
   Adaptor sequences. 
     How much it affects the QC statistics?
     Statistics: 
      1. Per-base quality(Phred Score).
      
Phred quality Score(Q) is a measure of the confidence in the accuracy of each base call in the sequence. 
Represents that a base is called incorrectly. Q = -10log(P)
Visualized in FastQc as boxplot showing quality across each position. 

Low per-base quality -> Trim
Overall poor per-base quality -> Bad sequecing or adaptor contamination. 
   If the insert size is less, then the sequencer reads into the adaptor. 
   Detection:
    Low quality tails in per-base quality plots.
    Overrepresented adaptor sequences detected.
    Reads that fail to align well to the genome. 
 
 
 #..........TRIMMING ADAPTOTR SEQUENCES..............................

Tools: cutadapt,  fastp and Trim Galore


Comparison 
......................cutadapt.................................................. 
-a and -A specify the exact adaptor sequences to trim for Read1 and Read2
No Quality filtering by default.
No automatic adaptor detection. 
No QC report created.
Single-threaded by default. 
More manual setup.

Syntax: 
  cutadapt \
  -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC \
  -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT \
  -o sample_R1_trimmed.fastq.gz \
  -p sample_R2_trimmed.fastq.gz \
  sample_R1.fastq.gz sample_R2.fastq.gz
 
.....................fastp.......................................................
..detect_adaptor_for_pe for automatic adaptors detection on paired-end reads and trim them.   
   There's no need to specify the adaptor sequences. 
Quality filtering + trimming at once.
HTML + JSON QC reports.
Multi-threaded (fast).
Minimal configuration.

fastp \
  -i sample_R1.fastq.gz \
  -I sample_R2.fastq.gz \
  -o sample_R1_trimmed.fastq.gz \
  -O sample_R2_trimmed.fastq.gz \
  --detect_adapter_for_pe \
  --thread 4 \
  --html fastp_report.html \
  --json fastp_report.json


 #fastp is selected.
   Fast
   Minimal configuration*
   
      """In the context that, there's no need to specify adaptor  sequences separately and individually handling Detection, Trimming, Quality filtering and QC reports using --detect_adaptor_for_pe.""" 
  
   Detection and Trimming in one go
   QC Reports 
 

................................................................
..........................STEP3.................................
.....................Alignment to Reference Genome........................
................................................................
Step1: Find which tools to use, compare and find the one that suits our requirements.
Tools: Bowtie2, BWA-MEM, STAR, HISAT2 and  Minimap2

1. Bowtie2:
 - Designed for short-read alignment (DNA-seq, ATAC-seq).
   

 - Handles paired-end reads natively
   Aligns them as a pair, preserving fragement length and orientation- critical for nucleosome positioning and peak calling. 

 - Allows gapped and mismatched alignments
   Further exploration....

 - Moderate speed, balanced accuracy and memory use
   

 - Widely used in ATAC-seq pipelines
   ENCODE ATAC-seq pipeline uses Bowtie2 for alignment. 
   Better reproducibility, community support and validated accuracy.

 - Outputs SAM/BAM files compatible with downstream tools
   : MACS2(peak calling), deeptools(visualization), IGC(genome browser), bedtools/samtools for filtering. 
      
bowtie2 -x genome_index \
  -1 sample_R1.fastq.gz -2 sample_R2.fastq.gz \
  --very-sensitive -p 8 -S sample.sam
 
 
 
 
 
 Step1: Create a con
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
      
2.BWA-MEM  
 - Good for longer reads, also works well for short reads

 - Seed-and-extend alignment method

 - Handles indels well, accurate mapping

 - Fast with moderate memory usage

 - Commonly used for DNA-seq but less common than Bowtie2  
   for ATAC-seq      
      
 bwa mem -t 8 genome.fa \
  sample_R1.fastq.gz sample_R2.fastq.gz > sample.sam
#..............................................................................................
#.yaml file is a structured configuration file used to describe conda environment describing its' name, channels, and dependencies.

Step1: Create a conda environment yaml file
cd envs; touch bowtie2.yaml; gedit bowtie2.yaml
name: bowtie2_env <---root-level key(name of the environment
channels: <---key for where to find packages
 - bioconda <---item in the 'channels' list
 - conda-forge
dependencies: <---key for what to install
 - bowtie2=2.5.1 <---each is a software package with version
 - samtools=1.17
 
 #bowtie2 tool is for aligning reads to reference genome
 #samtools is for indexing, sorting and manipulating bam files. 
 
Validate the envrionment with conda env create -f  bowtie2.yaml. To validate means to check if the environment definition is correct and functional. 
No typos
Channels are reachable.
Versions are available and can be resolved together. 


#step2: Edit the config.yaml file.

What to enter in the config.yaml file for bowtie2?

EXAMPLE: REVERSE ENGINEERING

bowtie2 -x indices/hg38 -1 sample_R1.fastq -2 sample_R2.fastq -S sample.sam -p 8

Mention the dynamic pieces in the config.yaml file i.e,  the inputs and the options that change per project. 

Dynamic pieces: 
sample_R1.fastq, 
sample_R2.fastq,
sample.sam &
8


gedit config.yaml; 

   "raw_data/genome/index/index"
in
index_bowtie2:puts_bowtie2:  "results/fastp/cleaned_reads"
outputs_bowtie2: "results/aligned_reads"
threads:          8


#config.yaml specifies the pipeline input/output file paths , tools parameters and other settings to run the workflow dynamically.

#..............................................................
#...........................samtools...........................
#.............................view.............................
There will be only one output of the bowtie2 tool used to align reads which is in SAM(Sequence Alignment/Map) format, a universal format,  and contains aligned reads in text-format.

A conda environment yaml file will be created.It's a structured configuration file used to describe conda environment describing its' name, channels, and dependencies. 

To validate the environment, conda env create -f Samtools_View.yaml conda command line is used. If the environment is created, then the file is correct and functional. 

Reason to create separate environment:
 1. Each tool can run its own environment with all  
    dependencies isolated to avoid version cnflicts.
 2. Ensures the exact tool version and dependencies are used  
    very time to ensure reproducibility i.e. the same result 
    is produced even years later.
 3. Easy to share and run on different systems without 
    "dependency hell" for being portable and avoid version 
    conflict.
 
 
conda-forge is always used because bioconda depends on conda-forgefor lower-level binaries.  
Fills gaps. Some package exists on conda-forge only. 
Better dependency resolution-It has newer, better- maintained  packages. 
  
 2.EDIT config.yaml file
 
The command to be executed in the shell: samtool view -SB aligned.sam > aligned.bam. 

Dynamic Pieces: aligned.bam and aligned.sam. 
These refer to the inputs and the options that change per project. 

The file specifies the input/output file paths, tools parameters and other options that runs the workflow dynamically. 
#...............................................................
#..........................samtools.................................
#............................sort..............................


Step1: Create a conda environment yaml file. 
Step2: Edit config.yaml file

The command that will be executed in the shell: 
samtools sort aligned.bam -o aligned_sort.bam

Dynamic Pieces: aligned.bam and aligned_sort.bam

#Create a snakemake rule

#Wildcard is a snakemake object that matches a rule's input or output patterns against your filename. 

#samtools: front-end command line tool and htslib is a C backend API (Application Package Interface).











#..............................................................
#.....................Samtools.................................
#.........................index................................

#This is for fast random access to alignments.






#...........................................................
#.....................samtools..............................
#......................markdup..............................

Why samtools markdup?






     
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      


